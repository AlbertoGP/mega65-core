Introduction
----------

The 65GS02 is the fast CPU core of the C65GS computer.  It is
basically a fast 6502 with increased IPC through the use of a 64bit
memory bus.  The memory bus is separated into eight separately
addressable columns, allowing the fetching of instructions in a single
cycle, regardless of length.  This, combined with pipelining the
writing of operands back to registers or memory while fetching the
next instruction, and the removal of all page-crossing penalties
allows for an increased IPC compared with an identically clocked
6502/6510 or even 65C02/4510.

C64 Compatability
---------------

Any CPU with altered cycle timing cannot be 100% C64 compatible. That
said, care can be taken to reduce difference in the effects of
instructions, regardless of the time they take to execute.  The 65GS02
design takes some care in this matter, as differences in the
read-modify-write instructions on the 4510 were a source of
considerable incompatibility of C64 software with the
C65. Specifically, the 4510 did not write the original operand before
writing the final value of the operand when executing
read-modify-write instructions. This prevented the common idiom of
using DEC $D019 or LSR $D019 to acknowledge interrupts from the
VIC-II.

Memory Write Pipelining
-------------------

Memory write pipelining is possible only when the PC to (PC+2) and the
memory address being written to do not share the same lower 3 bits,
and the memory write and instruction fetch are both from fast RAM, as
it is implemented through the separate addressing of the memory
columns.  This allows memory write pipelining to occur approximately
5/8 of the time.

For example the RTS instruction in the code fragment below would be
fetched while writing the accumulator to location $0401 because the
lowest three bits of that address are %001, while the lowest three
bits of the PC through PC+2 are %101, %110 and %111. As none of these
match %001, the instruction at $2005 can be fetched while committing
the write.

2000 A9 01     LDA #$01
2002 8D 01 04  STA $0401
2005 60        RTS

Instruction cycle counts
-------------------

The following section is horribly wrong, as the CPU core has been
completely re-written, and does not yet support the fast RAM multiple
reads that shave the cycle counts down.  ASL, INC etc perform the
expected dummy writes for compatibility with many interrupt handlers
that use instructions like ASL $D019 or INC $D019 to acknowledge
interrupts without requiring a register.

The primary driver for cycle counts are the addressing mode
concerned. The following table is for normal instructions.  Notes
following the table describe deviations from this table.

Cycles Addressing Mode
----- --------------
1     Implied
1     Accumulator
1     Immediate
1     Relative (including if the branch is taken)
2     Zero Page
2     Zero Page,X
2     Zero Page,Y
2     Absolute (including JMP)
2     Absolute,X
2     Absolute,Y
3     (ZP,X)
3     (ZP,Y)
3     (Absolute)

Notes:
* For read-modify-write instructions, one additional cycle is required
to accommodate the memory read.
* Where memory writes are to fast RAM and do not conflict with the
address of the next instruction, cycle counts may be reduced by one
cycle due to memory write pipe-lining.
* For all instructions fetched from I/O memory add 2 cycles.
* For read-modify-write instructions pointing to I/O memory
addresses, one additional cycle is required to allow for writing the
original value back to the source address. This allows the DEC $D019
or LSR $D019 video interrupt acknowledgement idiom to continue to
work, thus addressing a major source of incompatibility on the C65.
* JSR takes 3 cycles, as the 16-bit return address is written in
parallel.
* RTS and RTI take 2 cycles, as the return address (and processor
flags for RTI) are read in a single cycle.
* BRK takes 
* For accesses to slow RAM and I/O substantial delays may be incurred
due to the access time of those address types. Slow RAM has an access
time of 70ns (14MHz, 5 cycles at 64MHz).  This penalty applies to each
such memory access.  For example, executing LSR $4000 where $4000 is a
slow RAM address will incur the penalty twice, as location $4000 must
be read and then written to. 

CAVEATS
-------

Instructions can be fetched from fast RAM or I/O (and in a future
update) from slow RAM.  However, the entire instruction including its
operands must be fetched from the same memory type.  Instructions that
cross the boundary between pages of differing memory types will result
in undefined operand byte(s) being fetched.

SPECIAL INSTRUCTIONS
------------------

SETMAP Set MMU bank register

(A<<8)|X -> MMU[Y]        N Z C I D V
                                      - - - - - -

     addressing    assembler    opc  bytes  cyles
     --------------------------------------------
     implied  SETMAP         02    1     1





