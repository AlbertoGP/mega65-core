OVERVIEW
--------

The C65GS computer is designed to be reimagination of the C65/C64DX
computer using a modern FPGA to implement most functions.

The C65GS differs from the C65 in that it aims to offer a near 100%
C64-compatible mode by providing a dedicated 6510+VIC-II emulation
independent of the additional more capable processor and video chips.
Both functions operate in parallel, and input and output is switched
dynamically between the two under programmer control.

The C65GS computer has several processing cores and video cores:

For C64 mode:
- 6510 (BlobFish) compatible processor from the FPGA64 project.
- 6567/9 (VIC-II) compatible video generator from the FPGA64 projects.
For C65GS mode:
- 65GS02 (SailFish), a 6502 instruction-compatible processor with
integrated MMU capable of addressing 256MB of RAM.  This processor
uses a wide internal memory bus to minimise cycle counts.  Most
instructions complete in 1 or 2 cycles.  More than one core may be
present on architectures that support it.
- 65GS69 (VampireSquid), a 6569-inspired video controller, directly
driving a 1920x1200@60Hz VGA output, supporting a 256-colour palette
drawn from a 24-bit* colour space, and higher-resolution modes, upto
1920x1200.  All higher-resolution modes are normally text modes, using
standard or 256-colour colour character glyphs, so that high
resolution modes can be used without consuming too much memory. Only
one core will be present. 

* On the prototype Nexys4 FPGA and some other FPGA boards the colour
  depth is limited to 12-bit due to limitations in the VGA interface
  hardware. 


MEMORY MAP
-----------

The C65GS computer supports a 256MB memory map using bank switch
registers to map 4KB pieces of that memory map into the 64KB 6502
address space of the sailfish primary processor.

Memory is banked independently for instruction reads, memory reads and
memory writes. This means that it is possible to have 64KB of code
co-exist with 64KB of data.  

The video chip also banks independently from the processor, but is
only able to access the 128KB fast ram, plus some other special IO
memories.

Long 28-bit addresses are expressed as a 16-bit bank prefix followed
by the 12-bit intra-page address.  For example, $0001.0000 refers to
the first byte in the second 64KB of RAM.

The 256MB memory map is laid out as follows:

$FFFD.000 - $FFFF.FFF - 12KB boot ROM.
$FFFC.000 - $FFFC.FFF - C65GS char set ROM (not the copyright C64 character ROM)
$FFF0.000 - $FFFB.FFF - Reserved (most likely will be used for ROMs).
$FFE0.000 - $FFEF.FFF - Reserved (most likely will be used for ROMs).
$FFD4.000 - $FFDF.FFF - Reserved for additional I/O (ethernet, USB,
microSD etc)
$FFD4.000 - $FFD4.0FF - Recent PS/2 compatible keyboard scan code bytes.
$FFD3.000 - $FFD3.FFF - I/O page, with extra registers and features enabled.
$FFD2.000 - $FFD2.FFF - C64-style I/O page, extra features enabled (eg REU).
$FFD1.000 - $FFD1.FFF - C65-style I/O page, with extra registers enabled.
$FFD0.000 - $FFD0.FFF - C64-style I/O page.
$FFC0.060 - $FFCF.FFF - Reserved (most likely will be used for I/O
pages).
$FFC0.000 - $FFC0.05F - Alternate access to CPU MMU registers.
$F000.000 - $FFBF.FFF - Reserved (most likely will be used for I/O)
$9000.000 - $EFFF.FFF - Reserved for slow-RAM expansion (allows 112MB total).
$8000.000 - $8FFF.FFF - 16MB slow RAM (approximately 14MHz).
$0080.000 - $7FFF.FFF - Reserved for fast-RAM expansion (allows 128MB total).
$0000.000 - $001F.FFF - 128KB Fast RAM (full clock speed, 64MHz at present).

ROMs on the C65GS will initially be implemented as pre-initialised RAM
block in the fastio space, and by mapping those blocks for read and
execute, with writes directed to another block of RAM.  In this way
the C64 style semantic of reading from ROM and writing to "underlying"
RAM can be directly supported.

The C64 side memory map is as for a standard C64, using FPGA64 for its'
implementation.

C64 ROMs will be loaded from microSD to avoid any potential copyright
problems in FPGA configuration bitstream.

IO MEMORY MAP
-------------

The IO memory map (usually mapped addressed $D000 - $DFFF) differs
between the fast and slow sides.  

The slow side shows a standard C64 IO memory map, with the addition of
two or more REU register sets in the $DF00 IO page, if enabled by the
fast side.  The fast side can disable access to the fast RAM REU(s) to
isolate the fast side from memory effects caused by the slow side.

The fast side shows a more C65/C64DX like IO memory map, again with
REU registers in the $DF00 IO page.

MEMORY MAP ON RESET
-------------------
On reset the SailFish CPU provides the following memory map for read
and instruction fetching:

$0000 - $CFFF to $0000.000 - $000C.FFF (fast RAM)
$D000 - $DFFF to $FFD3.000 - $FFD3.FFF (enhanced IO page)
$E000 - $FFFF to $FFFE.000 - $FFFF.FFF (kernel65 ROM)

Write to $E000 - $FFFF direct to $000E.000 - $000F.FFF, providing
similar semantics to the C64, and to protect the kernel ROM from being
overwritten, since ROMs are mutable on the 65GS.

MEMORY TYPES
------------

Similar to the Amiga(tm) series of computers, the C65GS has two main
types of RAM, fast RAM and slow RAM.  However, the function of these
memory types differs significantly from the Amiga, as described below.

Fast RAM is a 64-bit wide fast memory bus accessible by the SailFish
processor and VampireSquid video controller. Fast RAM is dual port,
allowing both processor and video controller to access it
simultaneously.  In this way, fast RAM on the C65GS combines the
advantages of Amiga-style fast and chip RAM.

On architectures that contain multiple SailFish cores, fast RAM access
will be allowed by all cores simultaneously.  Multiple simultaneous
writes to a memory address have undefined result.  In practice, the
writes will likely be serialised in an architecture-dependent manner.

Whereas fast RAM can be used by the processor and video controller on
the "fast side" of the C65GS, the slow RAM can be used by the "slow
side" of the C65GS.  The 6510 and 6569 can only access the slow RAM.

The link between the two processors and types of RAM are through the
SailFish processor's ability to read and write slow RAM directly.
That is, the SailFish processor can map slow RAM into its address
space, and read and write from it.  

However, at the time of writing it is not possible to execute
instructions in slow RAM or I/O, as the slow RAM and I/O interfaces do
not support the wide memory interface required by the SailFish
instruction decode logic.  This limitation also applies to zero page
and the stack, which must also be located in a fast RAM
page. Attempting to execute instructions or fetch indirect operands
via any source other than fast RAM will result in undefined behaviour,
and any observed behaviour should not be depended upon, as it is
subject to change in future core revisions.  The long-term goal is to
allow execution of instructions from I/O and slow RAM.

The stack MUST be in fast RAM.  If non-fast RAM is mapped to the
$0000-$0FFF, stack accesses will occur in fast RAM at an alias address
that corresponds to the lower 27 bits of the address specification.

REU MODE MEMORY ACCESS
----------------------

Slow RAM is accessible to both the slow and fast side of the system.
Both processors are able to access the first 16MB of slow RAM by REU
emulation registers at $DF00 - $DF0A.

To access any additional slow RAM or the fast RAM via the REU DMA
controller an additional REU register is involved.

$DF0B contains the high order nybl of the DMA address that selects
which 16MB bank the REU will access.  That is the complete DMA address
is formed from the following REU registers:

$DF04 - bits 0 - 7 of DMA address
$DF05 - bits 8 - 15 of DMA address
$DF06 - bits 16 - 23 of DMA address
$DF0B - bits 24 - 24 of DMA address

That is the complete long address is formed according to $B665.544,
where the digits refer to the REU register numbers.

Values $00-$07 access fast RAM (upto 128MB), $08-$0E access slow
RAM (up to  112MB), and $0F accesses the special address space
$F000.000 - $FFFF.FFF, which includes the fast IO address space. 

Note that REU-emulation DMA operations do not occur at C64 REU
transfer speeds.  Rather, transfers occur at the maximum speed for the
particular transfer type.

Approximate REU DMA transfer speeds:

+-------+-------+------------+
|Source |Target |Speed       |
+-------+-------+------------+
|FastRAM|FastRAM|~512MB/sec*   |
|FastRAM|SlowRAM|~28MB/sec^  |
|SlowRAM|SlowRAM|~28MB/sec^  |
|SlowRAM|FastRAM|~28MB/sec^  |
|FastRAM|Fast IO|~64MB/sec% |
|SlowRAM|Slow IO|~1MB/sec#   |
|Fast IO|FastRAM|~64MB/sec% |
|Slow IO|SlowRAM|~1MB/sec#   |
|Slow IO|FastRAM|Not possible|
|Fast IO|SlowRAM|Not possible|
+-------+-------+------------+
* Transfers are 64bits wide at fast RAM clock speed (64MHz).
^ Transfers are 16bits wide at slow RAM clock speed (~14MHz).
% Transfers are 8bits wide at fast (C65GS) IO clock speed (64MHz).
# Transfers are 8bits wide at slow (C64) IO clock speed.
